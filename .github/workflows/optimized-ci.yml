name: 🚀 Optimized CI/CD (Free Tier)

# Optimized for GitHub Actions free tier limits
# - Reduced matrix builds
# - Conditional job execution
# - Self-hosted runner for heavy tasks
# - Efficient caching

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  # Remove daily schedule to save minutes - use manual trigger instead
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick      # Fast tests only (~5 min)
          - standard   # Standard tests (~15 min)
          - full       # All tests (~45 min)

env:
  PYTHON_VERSION: '3.9'

# Cancel previous runs to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick validation (always runs - ~3-5 minutes)
  quick-check:
    name: 🔍 Quick Validation
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.changes.outputs.code_changed }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Detect Changes
      id: changes
      run: |
        # Check if code files changed (skip docs-only changes)
        if git diff --name-only ${{ github.event.before || 'HEAD~1' }} HEAD | grep -E '\.(py|yml|yaml|toml|cfg|ini)$'; then
          echo "code_changed=true" >> $GITHUB_OUTPUT
          echo "📝 Code changes detected - will run tests"
        else
          echo "code_changed=false" >> $GITHUB_OUTPUT
          echo "📄 Only documentation changes - skipping tests"
        fi

    - name: 🐍 Set up Python
      if: steps.changes.outputs.code_changed == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      if: steps.changes.outputs.code_changed == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pip install -e ".[dev]"

    - name: 🎨 Pre-commit Checks
      if: steps.changes.outputs.code_changed == 'true'
      run: |
        # Run the same checks as pre-commit hooks
        echo "🎨 Running code quality checks..."
        black --check --diff src/ tests/ || echo "::warning::Code formatting issues found"
        isort --check-only --diff src/ tests/ || echo "::warning::Import sorting issues found"
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 || echo "::warning::Linting issues found"

  # Standard tests (runs on code changes - ~8-12 minutes)
  standard-tests:
    name: 🧪 Standard Tests
    runs-on: ubuntu-latest
    needs: quick-check
    if: needs.quick-check.outputs.should_run_tests == 'true'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🧪 Run Unit Tests
      run: |
        echo "🧪 Running unit tests (non-hardware)..."
        python -m pytest tests/ \
          -m "not hardware and not integration and not slow" \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=75 \
          -x \
          --tb=short \
          --durations=10

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      if: github.event_name == 'pull_request'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: 🔒 Security Scan
      run: |
        echo "🔒 Running security scans..."
        # Install security tools
        pip install bandit safety
        
        # Run bandit for common security issues
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Check for known vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
        
        # Display results
        echo "🔍 Security scan completed"
        if [ -f bandit-report.json ]; then
          echo "📋 Bandit findings:"
          cat bandit-report.json | jq -r '.results[] | "⚠️ \(.filename):\(.line_number) - \(.test_name)"' || echo "No issues found"
        fi

  # Hardware tests (only on main branch or manual trigger - uses self-hosted runner)
  hardware-tests:
    name: 🔧 Hardware Tests (Rock Pi)
    runs-on: [self-hosted, rock-pi-3399]
    needs: [quick-check, standard-tests]
    
    # Only run on main branch pushes or manual full scope
    if: |
      needs.quick-check.outputs.should_run_tests == 'true' && 
      (github.ref == 'refs/heads/main' || 
       github.event.inputs.test_scope == 'full' ||
       github.event.inputs.test_scope == 'standard')
    
    timeout-minutes: 25  # Limit to save runner time
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Quick System Check
      run: |
        echo "🔧 Rock Pi 3399 System Status:"
        echo "Memory: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
        echo "Python: $(python3 --version)"
        echo "Disk: $(df -h / | tail -1 | awk '{print $4}' | tr -d '\\n') available"

    - name: 🐍 Setup Environment
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -e ".[dev]"

    - name: 🧪 Critical Hardware Tests
      run: |
        echo "🧪 Running critical hardware tests..."
        timeout 20m python run_tests.py --critical --verbose || {
          echo "⚠️ Some hardware tests failed or timed out"
          exit 1
        }

    - name: 🧹 Cleanup
      if: always()
      run: |
        # Clean up test artifacts to save space
        rm -f /tmp/rockpi_test_*.json
        rm -f /tmp/test_*.log

  # Full integration (manual only - ~30-45 minutes)
  full-integration:
    name: 🌐 Full Integration Tests
    runs-on: [self-hosted, rock-pi-3399]
    needs: hardware-tests
    
    # Only on manual trigger with full scope
    if: github.event.inputs.test_scope == 'full'
    
    timeout-minutes: 45
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Environment
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -e ".[dev]"

    - name: 🌐 Complete System Tests
      run: |
        echo "🌐 Running complete system integration tests..."
        python run_tests.py --category all --verbose --coverage

    - name: 📊 Generate Reports
      if: always()
      run: |
        echo "📊 Generating test reports..."
        # Generate comprehensive report
        echo "# Full Integration Test Report" > integration-report.md
        echo "Date: $(date)" >> integration-report.md
        echo "Commit: ${{ github.sha }}" >> integration-report.md
        
    - name: 📊 Upload Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: full-integration-reports
        path: |
          integration-report.md
          htmlcov/
        retention-days: 14  # Reduced retention to save storage

# Global settings to optimize resource usage
env:
  # Optimize Python for faster execution
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
