name: 🔍 Pull Request Tests (Optimized)

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

# Cancel previous runs when new commits are pushed to save minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Quick validation for pull requests
  pr-validation:
    name: 🚀 PR Quick Validation
    runs-on: ubuntu-latest
    
    # Skip draft PRs
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        # Check out the PR head
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
     - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        # Only install essential tools for PR validation
        pip install black isort flake8

    - name: 🎨 Code Formatting Check
      run: |
        echo "🎨 Checking code formatting..."
        black --check --diff src/ tests/ || {
          echo "❌ Code formatting issues found. Run: black src/ tests/"
          echo "💡 Tip: Install pre-commit hooks to catch this early: pip install pre-commit && pre-commit install"
          exit 1
        }
    
    - name: 📋 Import Sorting Check
      run: |
        echo "📋 Checking import sorting..."
        isort --check-only --diff src/ tests/ || {
          echo "❌ Import sorting issues found. Run 'isort src/ tests/' to fix."
          exit 1
        }
    
    - name: 🔍 Quick Linting
      run: |
        echo "🔍 Running quick linting checks..."
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 --select=E,W,F
    
    - name: 📋 Test Structure Validation
      run: |
        echo "📋 Validating test suite structure..."
        python validate_tests.py
    
    - name: 🧪 Fast Unit Tests
      run: |
        echo "🧪 Running essential unit tests only..."
        python -m pytest tests/ \
          -m "not hardware and not integration and not slow" \
          --tb=short \
          -q \
          --maxfail=3 \
          --durations=3 \
          -x  # Stop on first failure to save time
    
    - name: 📊 PR Summary
      if: always()
      run: |
        echo "## 📊 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed Checks:" >> $GITHUB_STEP_SUMMARY
        echo "- 🎨 Code formatting (Black)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Import sorting (isort)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Linting (Flake8)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Test structure validation" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Fast unit tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ PR is ready for review" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 Hardware tests will run after merge to main" >> $GITHUB_STEP_SUMMARY

  # Critical tests that must pass for PRs
  pr-critical-tests:
    name: 🧪 Critical Tests (PR)
    runs-on: ubuntu-latest
    needs: pr-validation
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: 🧪 Run Critical Tests
      run: |
        echo "🧪 Running critical tests that must pass..."
        python run_tests.py --critical --verbose
    
    - name: 📊 Test Coverage Check
      run: |
        echo "📊 Checking test coverage..."
        python -m pytest tests/ \
          -m "not hardware and not integration" \
          --cov=src \
          --cov-report=term-missing \
          --cov-fail-under=75 \
          -q
    
    - name: ✅ PR Status Update
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ All critical tests passed! PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some critical tests failed. Please fix before review." >> $GITHUB_STEP_SUMMARY
        fi
